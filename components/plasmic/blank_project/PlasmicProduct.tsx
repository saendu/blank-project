// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4jWTYLjMvWY8nrbq5gdDSU
// Component: 2GCAE000MV
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: kAPW_62_PI7/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 4jWTYLjMvWY8nrbq5gdDSU/projectcss
import sty from "./PlasmicProduct.module.css"; // plasmic-import: 2GCAE000MV/css

import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: 7gYF74vjhXi/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: lhSCFW6snMj/icon
import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: DTyOr--YlrO/icon

export type PlasmicProduct__VariantMembers = {};

export type PlasmicProduct__VariantsArgs = {};
type VariantPropType = keyof PlasmicProduct__VariantsArgs;
export const PlasmicProduct__VariantProps = new Array<VariantPropType>();

export type PlasmicProduct__ArgsType = {};
type ArgPropType = keyof PlasmicProduct__ArgsType;
export const PlasmicProduct__ArgProps = new Array<ArgPropType>();

export type PlasmicProduct__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultProductProps {}

function PlasmicProduct__RenderFunc(props: {
  variants: PlasmicProduct__VariantsArgs;
  args: PlasmicProduct__ArgsType;
  overrides: PlasmicProduct__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__c0YKj)}>
            <div className={classNames(projectcss.all, sty.freeBox__zyXxh)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__liYIv)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__prTp6
                  )}
                >
                  {"Starter"}
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__humSp)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__icmk)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wvx4W
                      )}
                    >
                      {"$"}
                    </div>

                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__psJsT
                      )}
                    >
                      {"8"}
                    </h2>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__saYfl
                    )}
                  >
                    {"/month"}
                  </div>
                </p.Stack>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__nhBxK)} />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3AcMm)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__o10JN)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__afayJ)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__v1Rdm)}
                    >
                      <Icon14Icon
                        className={classNames(projectcss.all, sty.svg___3YF0Z)}
                        role={"img"}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ylClk
                        )}
                      >
                        <Icon14Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___6WqKb
                          )}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mPxwU)}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hsbQo
                          )}
                        >
                          {"Label"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cRvuW
                        )}
                      >
                        {
                          "Vestibulum mollis odio dictum ultrices facilisis molestie vestibulum"
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__nObR1)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mquip)}
                    >
                      <Icon14Icon
                        className={classNames(projectcss.all, sty.svg__vjfz4)}
                        role={"img"}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cxwi
                        )}
                      >
                        <Icon14Icon
                          className={classNames(projectcss.all, sty.svg__bVrIh)}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2LvzT
                      )}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hsxpF
                          )}
                        >
                          {"Label"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6Uxto
                        )}
                      >
                        {"Mus consequat a justo"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yokgY)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__ppFw4
                      )}
                      endIcon={
                        <ArrowRightsvgIcon
                          className={classNames(projectcss.all, sty.svg__eclRn)}
                          role={"img"}
                        />
                      }
                      showEndIcon={true}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__yzPyr)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jtYbz
                        )}
                      >
                        {"Buy starter"}
                      </div>
                    </Button>
                  </div>
                ) : null}
              </p.Stack>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__vj9Ib)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iPhVm)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eKv6
                  )}
                >
                  {"Pro"}
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jjBus)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2QkJ)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lbjOr
                      )}
                    >
                      {"$"}
                    </div>

                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__xfOtJ
                      )}
                    >
                      {"16"}
                    </h2>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sVd1V
                    )}
                  >
                    {"/month"}
                  </div>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___7ZU53)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gOwH)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__eLyYz)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__h6Vu)}
                    >
                      <Icon14Icon
                        className={classNames(projectcss.all, sty.svg__zMf6I)}
                        role={"img"}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__m1Yqb
                        )}
                      >
                        <Icon14Icon
                          className={classNames(projectcss.all, sty.svg__tRgZq)}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__xTKxS)}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gsnTu
                          )}
                        >
                          {"Label"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kEjZt
                        )}
                      >
                        {
                          "Ligula primis mollis sem dignissim semper lectus parturient"
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__bRgln)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cAw5L)}
                    >
                      <Icon14Icon
                        className={classNames(projectcss.all, sty.svg___9YKO)}
                        role={"img"}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bEr6
                        )}
                      >
                        <Icon14Icon
                          className={classNames(projectcss.all, sty.svg__aWdkW)}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__laZ5O)}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0PSg
                          )}
                        >
                          {"Label"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tXhut
                        )}
                      >
                        {"A curabitur dignissim pharetra porta suscipit"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__jrNxE)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__u9Et5)}
                    >
                      <Icon14Icon
                        className={classNames(projectcss.all, sty.svg__tHxGt)}
                        role={"img"}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yvxrl
                        )}
                      >
                        <Icon14Icon
                          className={classNames(projectcss.all, sty.svg__sGvE)}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__m0OpL)}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fAUj
                          )}
                        >
                          {"Label"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lfSdk
                        )}
                      >
                        {
                          "Condimentum diam a et sapien praesent potenti torquent a eros"
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___2Dmxm)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tizHn)}
                    >
                      <Icon14Icon
                        className={classNames(projectcss.all, sty.svg__pycbx)}
                        role={"img"}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__riKgp
                        )}
                      >
                        <Icon14Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___1G6YP
                          )}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__xtdc6)}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x8AMk
                          )}
                        >
                          {"Label"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6McHz
                        )}
                      >
                        {"Conubia in hac eu elementum sodales"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>

                <div className={classNames(projectcss.all, sty.freeBox__mCcWp)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__wsCnn)}
                    color={"blue" as const}
                    endIcon={
                      <ArrowRightsvgIcon
                        className={classNames(projectcss.all, sty.svg___9XbMq)}
                        role={"img"}
                      />
                    }
                    shape={"rounded" as const}
                    showEndIcon={true}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__az0RV)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__phoo
                      )}
                    >
                      {"Buy pro"}
                    </div>
                  </Button>
                </div>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__kpqT9)} />
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__opD2Z)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zwqWi)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5Hxo9
                  )}
                >
                  {"Team"}
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yErL)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sOzHq)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qZxPj
                      )}
                    >
                      {"$"}
                    </div>

                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2___76Bh5
                      )}
                    >
                      {"10"}
                    </h2>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n28Yo
                    )}
                  >
                    {"/member"}
                  </div>
                </p.Stack>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__bYwjO)} />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zXz8)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ovqaN)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dVril)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pVtdw)}
                    >
                      <Icon14Icon
                        className={classNames(projectcss.all, sty.svg__wprLa)}
                        role={"img"}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pCnxo
                        )}
                      >
                        <Icon14Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___14Qjf
                          )}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__x5U7J)}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zghpo
                          )}
                        >
                          {"Label"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tnh7O
                        )}
                      >
                        {"Ad nam curae a potenti platea"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__y2Cz)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uiSei)}
                    >
                      <Icon14Icon
                        className={classNames(projectcss.all, sty.svg__tTxFr)}
                        role={"img"}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hIxm
                        )}
                      >
                        <Icon14Icon
                          className={classNames(projectcss.all, sty.svg__vDzbQ)}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___500Aw
                      )}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__y0HLh
                          )}
                        >
                          {"Label"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nd1Kw
                        )}
                      >
                        {"A adipiscing scelerisque pretium consectetur sem"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__am1Y)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__synS8
                        )}
                        endIcon={
                          <ArrowRightsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zIpMi
                            )}
                            role={"img"}
                          />
                        }
                        showEndIcon={true}
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__pjpYx
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yHo0
                          )}
                        >
                          {"Buy Team"}
                        </div>
                      </Button>
                    </div>
                  ) : null}
                </p.Stack>
              </p.Stack>
            </div>
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xaRdb
            )}
          >
            {"Enter some text"}
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProduct__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProduct__VariantsArgs;
    args?: PlasmicProduct__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProduct__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProduct__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProduct__ArgProps,
          internalVariantPropNames: PlasmicProduct__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProduct__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProduct";
  } else {
    func.displayName = `PlasmicProduct.${nodeName}`;
  }
  return func;
}

export const PlasmicProduct = Object.assign(
  // Top-level PlasmicProduct renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicProduct
    internalVariantProps: PlasmicProduct__VariantProps,
    internalArgProps: PlasmicProduct__ArgProps
  }
);

export default PlasmicProduct;
/* prettier-ignore-end */
