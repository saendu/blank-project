// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4jWTYLjMvWY8nrbq5gdDSU
// Component: LU0WBGIqyVlJ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PrimaryButton from "../../PrimaryButton"; // plasmic-import: 7fe5zO4wma/component

import { useScreenVariants as useScreenVariants_1HC4EWglKvby } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 1H-C4eWglKVBY/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 4jWTYLjMvWY8nrbq5gdDSU/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: LU0WBGIqyVlJ/css

import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: dCxvUkLTj/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: m9BjVVuvGT/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: xlVQjxaBcp/icon
import Vector3Icon from "./icons/PlasmicIcon__Vector3"; // plasmic-import: vkVDj8IIBT/icon
import Vector4Icon from "./icons/PlasmicIcon__Vector4"; // plasmic-import: 3p0QxfTZAu/icon
import Vector5Icon from "./icons/PlasmicIcon__Vector5"; // plasmic-import: -5UIB6YQyU/icon
import Vector6Icon from "./icons/PlasmicIcon__Vector6"; // plasmic-import: T94DyHkG3H/icon
import Group2Icon from "./icons/PlasmicIcon__Group2"; // plasmic-import: GPXecRDOMe/icon
import Vector7Icon from "./icons/PlasmicIcon__Vector7"; // plasmic-import: HDSB2xlG2j/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navContainer?: p.Flex<"div">;
  frame54?: p.Flex<"div">;
  amavitaLogo5?: p.Flex<"div">;
  group?: p.Flex<"div">;
  outlinedButton?: p.Flex<"div">;
  unstyledButton2?: p.Flex<"div">;
  mainContiner?: p.Flex<"div">;
  heroContainer?: p.Flex<"div">;
  h1?: p.Flex<"div">;
  text?: p.Flex<"div">;
  illustration?: p.Flex<"div">;
  rectangle88?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_1HC4EWglKvby()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"navContainer"}
            data-plasmic-override={overrides.navContainer}
            className={classNames(projectcss.all, sty.navContainer)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame54"}
              data-plasmic-override={overrides.frame54}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame54)}
            >
              <div
                data-plasmic-name={"amavitaLogo5"}
                data-plasmic-override={overrides.amavitaLogo5}
                className={classNames(projectcss.all, sty.amavitaLogo5)}
              >
                <div
                  data-plasmic-name={"group"}
                  data-plasmic-override={overrides.group}
                  className={classNames(projectcss.all, sty.group)}
                >
                  <GroupIcon
                    className={classNames(projectcss.all, sty.svg__iPiun)}
                    role={"img"}
                  />

                  <VectorIcon
                    className={classNames(projectcss.all, sty.svg__f8Hrd)}
                    role={"img"}
                  />

                  <Vector2Icon
                    className={classNames(projectcss.all, sty.svg__ofOgQ)}
                    role={"img"}
                  />

                  <Vector3Icon
                    className={classNames(projectcss.all, sty.svg__s6DGc)}
                    role={"img"}
                  />

                  <Vector4Icon
                    className={classNames(projectcss.all, sty.svg___95BFh)}
                    role={"img"}
                  />

                  <Vector5Icon
                    className={classNames(projectcss.all, sty.svg__solql)}
                    role={"img"}
                  />

                  <Vector6Icon
                    className={classNames(projectcss.all, sty.svg__psb1M)}
                    role={"img"}
                  />
                </div>

                <Group2Icon
                  className={classNames(projectcss.all, sty.svg__kNxLm)}
                  role={"img"}
                />
              </div>

              <div
                data-plasmic-name={"outlinedButton"}
                data-plasmic-override={overrides.outlinedButton}
                className={classNames(projectcss.all, sty.outlinedButton)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"unstyledButton2"}
                  data-plasmic-override={overrides.unstyledButton2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.unstyledButton2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wxCp
                    )}
                  >
                    {"Jetzt starten"}
                  </div>
                </p.Stack>
              </div>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"mainContiner"}
            data-plasmic-override={overrides.mainContiner}
            className={classNames(projectcss.all, sty.mainContiner)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__pamHk)}>
              <p.Stack
                as={"div"}
                data-plasmic-name={"heroContainer"}
                data-plasmic-override={overrides.heroContainer}
                hasGap={true}
                className={classNames(projectcss.all, sty.heroContainer)}
              >
                <div
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {
                    "Wir k√ºmmern uns um die Rezepte, \nSie sich um Ihre Gesundheit."
                  }
                </div>

                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Arcu pellentesque volutpat."
                  }
                </div>
              </p.Stack>
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zM4Q5)}
            >
              <PrimaryButton
                className={classNames(
                  "__wab_instance",
                  sty.primaryButton__plgGe
                )}
                destination={"/" as const}
                isSelected={true}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jwJpS
                    )}
                  >
                    {"test"}
                  </div>
                }
              />

              <PrimaryButton
                className={classNames(
                  "__wab_instance",
                  sty.primaryButton__kSdQ
                )}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Hbvp
                    )}
                  >
                    {"Go to Products"}
                  </div>
                }
              />
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox___259Yf)}>
              <div
                data-plasmic-name={"illustration"}
                data-plasmic-override={overrides.illustration}
                className={classNames(projectcss.all, sty.illustration)}
              >
                <Vector7Icon
                  className={classNames(projectcss.all, sty.svg__aEcfx)}
                  role={"img"}
                />

                <Vector7Icon
                  className={classNames(projectcss.all, sty.svg___1LOrV)}
                  role={"img"}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__hgZq6)}
                  displayHeight={"509.67px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"424.653px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/blank_project/images/freepikCharacterInject37.svg",
                    fullWidth: 424.653,
                    fullHeight: 509.67,
                    aspectRatio: 0.833984
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___0Sk1D)}
                  displayHeight={"163.105px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"64.726px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/blank_project/images/freepikPlantInject37.svg",
                    fullWidth: 64.726,
                    fullHeight: 163.105,
                    aspectRatio: 0.402439
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__jZotr)}
                  displayHeight={"72.766px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"141.083px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/blank_project/images/freepikDevice2Inject37.svg",
                    fullWidth: 141.083,
                    fullHeight: 72.766,
                    aspectRatio: 1.906667
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___5IqN)}
                  displayHeight={"234.438px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"383.638px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/blank_project/images/freepikDevice1Inject37.svg",
                    fullWidth: 383.638,
                    fullHeight: 234.438,
                    aspectRatio: 1.635593
                  }}
                />

                <div
                  data-plasmic-name={"rectangle88"}
                  data-plasmic-override={overrides.rectangle88}
                  className={classNames(projectcss.all, sty.rectangle88)}
                />
              </div>
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navContainer",
    "frame54",
    "amavitaLogo5",
    "group",
    "outlinedButton",
    "unstyledButton2",
    "mainContiner",
    "heroContainer",
    "h1",
    "text",
    "illustration",
    "rectangle88"
  ],
  navContainer: [
    "navContainer",
    "frame54",
    "amavitaLogo5",
    "group",
    "outlinedButton",
    "unstyledButton2"
  ],
  frame54: [
    "frame54",
    "amavitaLogo5",
    "group",
    "outlinedButton",
    "unstyledButton2"
  ],
  amavitaLogo5: ["amavitaLogo5", "group"],
  group: ["group"],
  outlinedButton: ["outlinedButton", "unstyledButton2"],
  unstyledButton2: ["unstyledButton2"],
  mainContiner: [
    "mainContiner",
    "heroContainer",
    "h1",
    "text",
    "illustration",
    "rectangle88"
  ],
  heroContainer: ["heroContainer", "h1", "text"],
  h1: ["h1"],
  text: ["text"],
  illustration: ["illustration", "rectangle88"],
  rectangle88: ["rectangle88"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navContainer: "div";
  frame54: "div";
  amavitaLogo5: "div";
  group: "div";
  outlinedButton: "div";
  unstyledButton2: "div";
  mainContiner: "div";
  heroContainer: "div";
  h1: "div";
  text: "div";
  illustration: "div";
  rectangle88: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navContainer: makeNodeComponent("navContainer"),
    frame54: makeNodeComponent("frame54"),
    amavitaLogo5: makeNodeComponent("amavitaLogo5"),
    group: makeNodeComponent("group"),
    outlinedButton: makeNodeComponent("outlinedButton"),
    unstyledButton2: makeNodeComponent("unstyledButton2"),
    mainContiner: makeNodeComponent("mainContiner"),
    heroContainer: makeNodeComponent("heroContainer"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    illustration: makeNodeComponent("illustration"),
    rectangle88: makeNodeComponent("rectangle88"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
