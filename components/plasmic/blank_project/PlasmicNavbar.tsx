// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4jWTYLjMvWY8nrbq5gdDSU
// Component: FK45jwt1ZH
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 4jWTYLjMvWY8nrbq5gdDSU/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: FK45jwt1ZH/css

import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: dCxvUkLTj/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: m9BjVVuvGT/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: xlVQjxaBcp/icon
import Vector3Icon from "./icons/PlasmicIcon__Vector3"; // plasmic-import: vkVDj8IIBT/icon
import Vector4Icon from "./icons/PlasmicIcon__Vector4"; // plasmic-import: 3p0QxfTZAu/icon
import Vector5Icon from "./icons/PlasmicIcon__Vector5"; // plasmic-import: -5UIB6YQyU/icon
import Vector6Icon from "./icons/PlasmicIcon__Vector6"; // plasmic-import: T94DyHkG3H/icon
import Group2Icon from "./icons/PlasmicIcon__Group2"; // plasmic-import: GPXecRDOMe/icon

export type PlasmicNavbar__VariantMembers = {};

export type PlasmicNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbar__OverridesType = {
  root?: p.Flex<"div">;
  amavitaLogo5?: p.Flex<"div">;
  group?: p.Flex<"div">;
  outlinedButton?: p.Flex<"div">;
  unstyledButton?: p.Flex<"div">;
  button?: p.Flex<"div">;
};

export interface DefaultNavbarProps {
  className?: string;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"amavitaLogo5"}
        data-plasmic-override={overrides.amavitaLogo5}
        className={classNames(projectcss.all, sty.amavitaLogo5)}
      >
        <div
          data-plasmic-name={"group"}
          data-plasmic-override={overrides.group}
          className={classNames(projectcss.all, sty.group)}
        >
          <GroupIcon
            className={classNames(projectcss.all, sty.svg__qQjrb)}
            role={"img"}
          />

          <VectorIcon
            className={classNames(projectcss.all, sty.svg__uAwrb)}
            role={"img"}
          />

          <Vector2Icon
            className={classNames(projectcss.all, sty.svg__zKy4M)}
            role={"img"}
          />

          <Vector3Icon
            className={classNames(projectcss.all, sty.svg__uxy9X)}
            role={"img"}
          />

          <Vector4Icon
            className={classNames(projectcss.all, sty.svg__dDd)}
            role={"img"}
          />

          <Vector5Icon
            className={classNames(projectcss.all, sty.svg__l6D4B)}
            role={"img"}
          />

          <Vector6Icon
            className={classNames(projectcss.all, sty.svg__a8VvO)}
            role={"img"}
          />
        </div>

        <Group2Icon
          className={classNames(projectcss.all, sty.svg__jLqc)}
          role={"img"}
        />
      </div>

      <div
        data-plasmic-name={"outlinedButton"}
        data-plasmic-override={overrides.outlinedButton}
        className={classNames(projectcss.all, sty.outlinedButton)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"unstyledButton"}
          data-plasmic-override={overrides.unstyledButton}
          hasGap={true}
          className={classNames(projectcss.all, sty.unstyledButton)}
        >
          <div
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.button
            )}
          >
            {"Jetzt starten"}
          </div>
        </p.Stack>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "amavitaLogo5",
    "group",
    "outlinedButton",
    "unstyledButton",
    "button"
  ],
  amavitaLogo5: ["amavitaLogo5", "group"],
  group: ["group"],
  outlinedButton: ["outlinedButton", "unstyledButton", "button"],
  unstyledButton: ["unstyledButton", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  amavitaLogo5: "div";
  group: "div";
  outlinedButton: "div";
  unstyledButton: "div";
  button: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    amavitaLogo5: makeNodeComponent("amavitaLogo5"),
    group: makeNodeComponent("group"),
    outlinedButton: makeNodeComponent("outlinedButton"),
    unstyledButton: makeNodeComponent("unstyledButton"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
